@startuml
'https://plantuml.com/class-diagram

left to right direction

Application --[hidden]down> ServiceUser
Domain ----[hidden]down> Database

ServiceUser --[hidden]down> ModelUser
ModelLevel --[hidden]down> ModelUser

Application .> DomainService: use
DomainService ..> DomainModel: use

package Application <<Rectangle>> {
}

package Domain <<Rectangle>> {
    package Model as DomainModel <<Frame>> {
        package User as ModelUser <<Folder>> {
            class UserCollection {
                - items: Collection<T extends GettableUserInterface>
                + {static} **fromArray(Array<T> userList)**: UserCollection<T>
            }

            interface GettableUserInterface {
                + **getUserId()**:: int
                + **getLevel()**:: int
                + **getExp()**:: int
            }

            class GettableUser {
                + **getUserId(int userId)**:: int
                + **getLevel(int level)**:: int
                + **getExp(int exp)**:: int
            }

            interface UserDomainModelInterface {
                + **reflect(LevelInterface mstLevel, int expGained)**: void
                - **setLevel(int level)**: void
                - **addExp(int exp)**: void
            }

            abstract class AbstractUserActiveRecord {
                + {static} **findAll()**: UserCollection<UserDomainModelInterface>
                + {static} **findById(int userId)**: UserDomainModelInterface
                + {static} **create(UserCollection<UserDomainModelInterface> userCollection)**: int
                + {static} **update(UserCollection<UserDomainModelInterface> userCollection)**: int
                + {static} **delete(Array<int> userIdList)**: int
            }

            class UserActiveRecord  {
                + **reflect(LevelInterface mstLevel, int expGained)**: void
                - **setLevel(int level)**: void
                - **addExp(int exp)**: void
            }
        }

        package Level as ModelLevel <<Folder>> {
            interface LevelInterface {
                + **getLevel()**: int
            }

            interface DataResourceLevelInterface {
                + **findByExp(int exp)**: LevelInterface
            }
        }
    }

    package Service as DomainService <<Frame>> {
        package User as ServiceUser <<Folder>> {
            interface LevelUpServiceInterface {
                + **__invoke(int userId, int expGained)**: void
            }

            class LevelUpViaActiveRecordService {
                + **__invoke(int userId, int expGained)**: void
            }
        }
    }
}

LevelUpViaActiveRecordService .|> LevelUpServiceInterface: implements

GettableUserInterface *- UserCollection: composition

GettableUser -|> GettableUserInterface: extends
AbstractUserActiveRecord .|> UserDomainModelInterface: implements
AbstractUserActiveRecord -|> GettableUser: extends
UserActiveRecord -|> AbstractUserActiveRecord: extends

package Database <<Database>> {
}

UserActiveRecord -right-> Database: connection

@enduml
